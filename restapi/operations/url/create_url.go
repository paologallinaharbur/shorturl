// Code generated by go-swagger; DO NOT EDIT.

package url

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateURLHandlerFunc turns a function with the right signature into a create Url handler
type CreateURLHandlerFunc func(CreateURLParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateURLHandlerFunc) Handle(params CreateURLParams) middleware.Responder {
	return fn(params)
}

// CreateURLHandler interface for that can handle valid create Url params
type CreateURLHandler interface {
	Handle(CreateURLParams) middleware.Responder
}

// NewCreateURL creates a new http.Handler for the create Url operation
func NewCreateURL(ctx *middleware.Context, handler CreateURLHandler) *CreateURL {
	return &CreateURL{Context: ctx, Handler: handler}
}

/*CreateURL swagger:route POST /url Url createUrl

Create a new short url. Specify the URL with the protocol, es: `http://example.com`.
 It returns a new short version of the URL that can be used as: http://endpoint/{shortURL}.

*/
type CreateURL struct {
	Context *middleware.Context
	Handler CreateURLHandler
}

func (o *CreateURL) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateURLParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
