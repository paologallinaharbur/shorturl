// Code generated by go-swagger; DO NOT EDIT.

package url

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetURLHandlerFunc turns a function with the right signature into a get Url handler
type GetURLHandlerFunc func(GetURLParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetURLHandlerFunc) Handle(params GetURLParams) middleware.Responder {
	return fn(params)
}

// GetURLHandler interface for that can handle valid get Url params
type GetURLHandler interface {
	Handle(GetURLParams) middleware.Responder
}

// NewGetURL creates a new http.Handler for the get Url operation
func NewGetURL(ctx *middleware.Context, handler GetURLHandler) *GetURL {
	return &GetURL{Context: ctx, Handler: handler}
}

/*GetURL swagger:route GET /url/{shortURL} Url getUrl

Get a already existing url. The only argument that is requested is the shortURL to be fetched.

*/
type GetURL struct {
	Context *middleware.Context
	Handler GetURLHandler
}

func (o *GetURL) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetURLParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
